# AOC-Day 07

## Part 1

```elixir
Mix.install([
  {:kino, "~> 0.4.0"}
])

import ExUnit.Assertions
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
test_input = """
be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb |fdgacbe cefdb cefbgd gcbe
edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec |fcgedb cgb dgebacf gc
fgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef |cg cg fdcagb cbg
fbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega |efabcd cedba gadfec cb
aecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga |gecf egdcabf bgf bfgea
fgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf |gebdcfa ecba ca fadegcb
dbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf |cefg dcbef fcge gbcadfe
bdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd |ed bcgafe cdgba cbgef
egadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg |gbdfcae bgc cg cgb
gcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc |fgae cfgab fg bagce
"""
```

```elixir
display =
  test_input
  # |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(fn x -> String.split(x, ~r"(\s*\|\s*)") end)
  |> Enum.map(fn [wiring | [digits]] ->
    %{wiring: String.split(wiring, " "), digits: String.split(digits, " ")}
  end)
```

```elixir
# look for 2,4,3,7 segments
part1 =
  display
  |> Enum.map(fn %{digits: digits} -> digits end)
  |> Enum.map(fn list ->
    Enum.filter(list, fn s ->
      case String.length(s) do
        2 -> true
        4 -> true
        3 -> true
        7 -> true
        _ -> false
      end
    end)
  end)
  |> Enum.concat()
  |> Enum.count()
```

## Part 2

```elixir
defmodule Display do
  def segments() do
    %{
      :a => [1, 0, 1, 1, 0, 1, 1, 1, 1, 1],
      :b => [1, 0, 0, 0, 1, 1, 1, 0, 1, 1],
      :c => [1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
      :d => [0, 0, 1, 1, 1, 1, 1, 0, 1, 1],
      :e => [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],
      :f => [1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
      :g => [1, 0, 1, 1, 0, 1, 1, 0, 1, 1]
    }
  end

  def sort_string(s) do
    s
    |> String.split("")
    |> Enum.sort()
    |> Enum.join("")
  end

  def sort(list) do
    Enum.map(list, &sort_string(&1))
  end

  def guess_one(s) do
    case String.length(s) do
      2 -> [1]
      3 -> [7]
      4 -> [4]
      5 -> [2, 3, 5]
      6 -> [0, 6, 9]
      7 -> [8]
    end
  end

  def guess(list) do
    list
    |> Enum.map(fn s -> {s, guess_one(s)} end)
  end
end
```

```elixir
defmodule Wiring do
  def sub(a, b) do
    String.split(a, "", trim: true)
    |> Enum.filter(&(not String.contains?(b, &1)))
    |> Enum.join()
  end

  def intersect(a, b) do
    aa =
      String.split(a, "", trim: true)
      |> Enum.filter(&String.contains?(b, &1))
      |> Enum.join()

    String.split(b, "", trim: true)
    |> Enum.filter(&String.contains?(aa, &1))
    |> Enum.join()
  end

  def get(list, digit) do
    list
    |> Enum.filter(fn {wires, digits} -> Enum.find(digits, fn x -> x == digit end) end)
    |> Enum.map(&elem(&1, 0))
  end

  def get_one(list, digit) do
    [head | _] = get(list, digit)
    head
  end

  @doc """
   aaaa  
  b    c  
  b    c  
   dddd    
  e    f  
  e    f  
   gggg    
  """

  def deduct(w) do
    four = get_one(w, 4)
    seven = get_one(w, 7)
    one = get_one(w, 1)
    eight = get_one(w, 8)
    aaaa = sub(seven, one)
    bbdd = sub(four, seven)
    d235 = get(w, 2)
    aaddgg = intersect(Enum.at(d235, 0), intersect(Enum.at(d235, 1), Enum.at(d235, 2)))
    dddd = intersect(aaddgg, bbdd)
    aagg = sub(aaddgg, dddd)
    gggg = sub(aagg, aaaa)
    bbbb = sub(bbdd, dddd)
    d690 = get(w, 6)

    [{aaaa, bbbb, "?c", dddd, "e?", "f?", gggg}, {bbdd, aaddgg, aagg}]
  end
end

wiring_all =
  display
  # Use only wiring
  |> Enum.map(fn %{digits: d, wiring: w} ->
    Display.guess(Display.sort(w))
  end)

Wiring.deduct(Enum.at(wiring_all, 1))
```

# AOC-Day 06

## Part 1

```elixir
Mix.install([
  {:kino, "~> 0.4.0"}
])

import ExUnit.Assertions
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
defmodule Fishes do
  def from_list(list) do
    list
    |> Enum.sort()
    |> Enum.frequencies()
    # init all places with 0
    |> then(
      &Map.merge(%{0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0, 6 => 0, 7 => 0, 8 => 0}, &1)
    )
    |> Map.values()
  end

  def breed(fishes) do
    [new_fish | rest] = fishes
    # Fishes at 0 create a new fish and reset the timer to 6.
    # New fish have a timer of 8
    List.update_at(rest, 6, &(&1 + new_fish)) ++ [new_fish]
  end

  def generations(fishes, 0) do
    fishes
  end

  def generations(fishes, generations) do
    generations(breed(fishes), generations - 1)
  end
end

fishes =
  input
  |> Kino.Input.read()
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Fishes.from_list()
  |> Fishes.generations(80)
  |> Enum.sum()
```

## Part 2

```elixir
fishes_part_2 =
  input
  |> Kino.Input.read()
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Fishes.from_list()
  |> Fishes.generations(256)
  |> Enum.sum()
```

# Day 16: Packet Decoder

## Part 1

```elixir
examples = [
  "D2FE28",
  "38006F45291200",
  "EE00D40C823060",
  "8A004A801A8002F478",
  "620080001611562C8802118E34",
  "C0015000016115A2E0802F182340",
  "A0016C880162017C3686B18A3D4780"
]
```

```elixir
defmodule Reader do
  use Bitwise

  def parse_hex(hex) do
    Base.decode16!(hex)
  end

  def show_bits("") do
    IO.write("\n")
  end

  def show_bits(packet) do
    <<byte::8, rest::binary>> = packet
    IO.write(String.pad_leading(Integer.to_string(byte, 2), 8, "0"))
    show_bits(rest)
  end

  def header(packet) do
    <<version::3, type::3, bits::2, rest::binary>> = packet
    {version, type}
  end
end

bytes = Reader.parse_hex(Enum.at(examples, 0))

<<byte_1::8, rest::binary>> = bytes
Reader.show_bits(bytes)
Reader.header(bytes)
```
